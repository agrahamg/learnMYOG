---
import { Image } from "@astrojs/image/components";
import GeneratorForm from "@/components/GeneratorForm.astro";
---

<div class="flex items-start">
  <div class="flex flex-col">
    <Image
      format="webp"
      width={225}
      height={175}
      src={import("@/images/zipsack/zipPouchPlan.png") as any}
      alt="fabric"
      class="m-0 mr-5 rounded-lg"
    />
  </div>
  <div>
    <p>
      This pattern generator details the 2D fabric panel sized needed to achieve
      desired 3D dimensions of a rectangular zip pouch. Referencing the image,
      provide the desired dimensions for finished size pouch.
    </p>
    <GeneratorForm
      fields={{
        bottomLength: "Bottom Length",
        bottomWidth: "Bottom Width",
        height: "Height when Cinched",
      }}
    />

    <Image
      format="webp"
      width={225}
      height={175}
      src={import("@/images/zipsack/zipPouchPattern.png") as any}
      alt="fabric"
      class="float-right rounded-lg"
    />

    <p>
      Seam Allowances: 3/8" (1 cm) typical with 1/2" (1.3 cm) Zipper Allowance
    </p>

    <div class="font-bold">
      <ul class="alt">
        <li>
          <strong
            >Body Panel Length: <span class="patternLength"></span></strong>
        </li>
        <li>
          <strong
            >Body Panel Height: <span class="patternHeight"></span></strong>
        </li><br />
        <li>
          <strong
            >Cord Channel Length: <span class="channelLength"></span></strong>
        </li>
        <li>
          <strong
            >Cord Channel Height: <span class="channelHeight"></span></strong>
        </li>
      </ul>
    </div>
  </div>
</div>

<script>
  import { init } from "@/ts/patternGenerators";

  init(function (
    isMetric: boolean,
    fields: { bottomLength: number; bottomWidth: number; height: number }
  ) {
    let { bottomLength, bottomWidth, height } = fields;

    const { cordChannelHeight, hem, sA } = isMetric
      ? { cordChannelHeight: 4, hem: 1, sA: 1 }
      : { cordChannelHeight: 1.5, hem: 0.5, sA: 0.5 };

    let patternHeight;

    // add material so top will close when bW is much wider than channel
    if (bottomWidth > 2.5 * cordChannelHeight) {
      // adds (1/2bW - cordChannelHeight) to top of patternHeight to make up additional width
      patternHeight = height + bottomWidth - cordChannelHeight + 2 * sA;
    } else {
      // 1/2bW is the corner cut off bottom to make rectangular
      patternHeight = height + 0.5 * bottomWidth + 2 * sA;
    }

    return {
      patternLength: 2 * bottomLength + 2 * bottomWidth + 2 * sA,
      patternHeight,
      channelLength: 2 * bottomLength + 2 * bottomWidth + 2 * hem, //hem on each end
      channelHeight: 2 * cordChannelHeight + 2 * sA, // SA on top and bottom
      sA,
      bottomWidth,
      halfBottomWidth: bottomWidth / 2,
      bottomLength,
    };
  });
</script>
